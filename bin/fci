#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'fci'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/fci` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/fci now"
  exit 64
end

include GLI::App
include FCI

program_desc 'is a command line tool that allows you to manage and synchronize your Freshdesk localization with Crowdin project'

version FCI::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'Be verbose'
switch [:v, :verbose], negatable: false

desc 'Project-specific configuration file'
default_value File.join(Dir.pwd, 'fci.yml')
arg_name '<s>'
flag [:c, :config]

commands_from 'fci/commands'

pre do |global, command, options, args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only

  unless File.exists?(global[:config])
    exit_now! <<-EOS.strip_heredoc
      Can't find configuration file (default `fci.yml').
      Type `fci help` to know how to specify custom configuration file
    EOS
  end

  # load project-specific configuration
  begin
    @fci_config = YAML.load(File.read(global[:config])) || {}
  rescue Psych::SyntaxError => err
    exit_now! <<-EOS
      Could not parse YAML: #{err.message}
    EOS
  end

  @freshdesk = FreshdeskAPI::Client.new do |c|
    c.base_url = @fci_config['freshdesk_base_url']
    c.username = @fci_config['freshdesk_username']
    c.password = @fci_config['freshdesk_password']
  end

  @crowdin = Crowdin::API.new(api_key: @fci_config['crowdin_api_key'], project_id: @fci_config['crowdin_project_id'], base_url: @fci_config['crowdin_base_url'])

  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
